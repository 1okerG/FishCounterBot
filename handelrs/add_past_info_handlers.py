from datetime import datetime
from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.types import CallbackQuery
from aiogram_calendar import simple_cal_callback, SimpleCalendar

from create_bot import *
from db import *
from keyboards import keyboard10, keyboard11, keyboard5, keyboard6, keyboard7, keyboard12, keyboard13


class AddPastInfo(StatesGroup):
    start_dialog = State()
    date_select = State()
    add_date = State()
    fish_set = State()
    fish_get = State()
    fish_count = State()
    fish_confirm = State()

async def start_dialog(message: types.Message):
    await message.answer('''–£ —Ü—å–æ–º—É —Ä–æ–∑–¥—ñ–ª—ñ —Ç–∏ –º–æ–∂–µ—à –¥–æ–¥–∞—Ç–∏ –¥–∞—Ç—É —Å–≤–æ—ó—Ö –º–∏–Ω—É–ª–∏—Ö —Ä–∏–±–∞–ª–æ–∫ üõ≥ 
–ê —Ç–∞–∫–æ–∂ —Å–≤–æ—ó —Ç—Ä–æ—Ñ–µ—ó! üé£''',
                         reply_markup=keyboard11)
    await AddPastInfo.start_dialog.set()

async def show_calendar(message: types.Message, state: FSMContext):
    if message.text == '–ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –¥–æ –º–µ–Ω—é üì±':
        await message.answer('–ü–æ–≤–µ—Ä—Ç–∞—é—Å—å –¥–æ –º–µ–Ω—é üì±', reply_markup=keyboard7)
        await state.finish()
    elif message.text == '–ü—Ä–æ–¥–æ–≤–∂–∏—Ç–∏ ‚úÖ':
        user_id = message.from_user.id
        await state.update_data(user_id=user_id)
        await message.answer('–î–æ–±—Ä–µ, —Ç–µ–ø–µ—Ä –æ–±–µ—Ä–∏ –¥–∞—Ç—É —Ä–∏–±–æ–ª–æ–≤–ª—ñ üìÖ', 
                            reply_markup=await SimpleCalendar().start_calendar())
        await AddPastInfo.date_select.set()
    else:
        await message.answer('–ë—É–¥—å-–ª–∞—Å–∫–∞, —Å–∫–æ—Ä–∏—Å—Ç–∞–π—Å—è –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–æ—é üòê',
                         reply_markup=keyboard11)
        await AddPastInfo.start_dialog.set()

async def select_date(callback_query: CallbackQuery, callback_data: dict, state: FSMContext):
    selected, date = await SimpleCalendar().process_selection(callback_query, callback_data)
    if selected:
        date = date.date()
        if date > datetime.today().date():
            await callback_query.message.answer('–¢–∏ –æ–±—Ä–∞–≤ –¥–∞—Ç—É —É –º–∞–π–±—É—Ç–Ω—å–æ–º—É üòÅ\n–°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑=)',
                                                reply_markup=await SimpleCalendar().start_calendar())
            await AddPastInfo.date_select.set()
        else:
            await state.update_data(date=date)
            await callback_query.message.answer(f'–î–∞—Ç–∞ —Ç–≤–æ—î—ó —Ä–∏–±–∞–ª–∫–∏: {date}, –≤—ñ—Ä–Ω–æ? üõ≥', 
                                                reply_markup=keyboard10)
            await AddPastInfo.add_date.set()

async def add_fishing_date(callback_query: CallbackQuery, state: FSMContext):
    if callback_query.data == 'no':
        await callback_query.message.answer('–ú–µ–Ω—é üì±', reply_markup=keyboard7)
        await state.finish()
    else:
        already_fishing = False
        data = await state.get_data()
        user_id = data.get('user_id')
        fishing_date = data.get('date')

        with Session() as session:
            already_fishing = await get_or_create_fishing_trip(session=session, 
                                                               user_id=user_id,
                                                               fishing_date=fishing_date)
        
        if already_fishing:
            message_for_user = '–ë–∞—á—É, —â–æ —Ü—å–æ–≥–æ –¥–Ω—è —Ç–∏ –≤–∂–µ –±—É–≤ –Ω–∞ —Ä–∏–±–æ–ª–æ–≤–ª—ñ, —Ö–æ—á–µ—à –¥–æ–¥–∞—Ç–∏ —Ç—Ä–æ—Ñ–µ—ó? üòâ'
        elif not already_fishing:
            message_for_user = '–î–æ–¥–∞—Ç—é –¥–∞—Ç—É –¥–æ —Å—Ç–∞—Å—Ç–∏—Å—Ç–∏–∫–∏, —Ç–∏ —Å–ø—ñ–π–º–∞–≤ —Ç–æ–¥—ñ —Ä–∏–±—É? üòâ'
        
        await callback_query.message.answer(message_for_user, reply_markup=keyboard12)
        await AddPastInfo.fish_set.set()

async def select_fish_name(message: types.Message, state: FSMContext):
    if message.text == '–ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –¥–æ –º–µ–Ω—é üì±':
        await message.answer('–ü–æ–≤–µ—Ä—Ç–∞—é—Å—å –¥–æ –º–µ–Ω—é üì±', reply_markup=keyboard7)
        await state.finish()
    elif message.text == '–ó–≤—ñ—Å–Ω–æ üòé':
        await message.answer('–ö—Ä—É—Ç–æ! –í–∏–±–µ—Ä–∏ —Ä–∏–±—É —è–∫—É —Ç–∏ –∑–ª–æ–≤–∏–≤', 
                            reply_markup=keyboard5)
        await AddPastInfo.fish_get.set()
    else:
        await message.answer('–ë—É–¥—å-–ª–∞—Å–∫–∞, —Å–∫–æ—Ä–∏—Å—Ç–∞–π—Å—è –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–æ—é üòê',
                         reply_markup=keyboard12)
        await AddPastInfo.fish_set.set()

async def get_fish_name(callback_query: CallbackQuery, state: FSMContext):
    fish_name = callback_query.data
    await state.update_data(fish_name=fish_name)
    await callback_query.message.answer('–¢–µ–ø–µ—Ä –≤–∫–∞–∂–∏ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –ø—ñ–π–º–∞–Ω–æ—ó —Ä–∏–±–∏',
                                        reply_markup=keyboard6)
    await AddPastInfo.fish_count.set()

async def get_fish_count(callback_query: CallbackQuery, state: FSMContext):
    fish_count = callback_query.data
    await state.update_data(fish_count=fish_count)
    data = await state.get_data()
    fish_name = data.get('fish_name')
    await callback_query.message.answer(f'–û—Ç–∂–µ, —Ç–≤—ñ–π —É–ª–æ–≤: "{fish_name}" –≤ –∫—ñ–ª—å–∫–æ—Å—Ç—ñ "{fish_count}". –í—ñ—Ä–Ω–æ?',
                                        reply_markup=keyboard10)
    await AddPastInfo.fish_confirm.set()

async def confirmation(callback_query: CallbackQuery, state: FSMContext):
    if callback_query.data == "yes":
        data = await state.get_data()
        fish_name = data.get('fish_name')
        fish_count = int(data.get('fish_count'))
        user_id = data.get('user_id')
        fishing_date = data.get('date')
        
        with Session() as session:
            await create_or_update_fish(session=session, user_id=user_id, fishing_date=fishing_date,
                                        fish_name=fish_name, fish_count=fish_count) 
        
        await callback_query.message.answer('–î–æ–±—Ä–µ, –∑–±–µ—Ä—ñ–≥–∞—é –¥–∞–Ω—ñ –¥–æ —Ç–≤–æ—î—ó —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ üòâ',
                                            reply_markup=keyboard13)
        await state.finish()
    elif callback_query.data == "no":
        await callback_query.message.answer('–ü–æ–≤–µ—Ä—Ç–∞—é—Å—å –¥–æ –º–µ–Ω—é üì±, –º–æ–∂–µ—à —Å–ø—Ä–æ–±—É–≤–∞—Ç–∏ —â–µ —Ä–∞–∑ ',
                             reply_markup=keyboard7)
        await state.finish()




def register_handlers(dp: Dispatcher):
    dp.register_message_handler(start_dialog, text='–î–æ–¥–∞—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ –º–∏–Ω—É–ª–æ—é –¥–∞—Ç–æ—é üßæ')
    dp.register_message_handler(show_calendar, state=AddPastInfo.start_dialog)
    dp.register_callback_query_handler(select_date, simple_cal_callback.filter(), state=AddPastInfo.date_select)
    dp.register_callback_query_handler(add_fishing_date, state=AddPastInfo.add_date)
    dp.register_message_handler(select_fish_name, state=AddPastInfo.fish_set)
    dp.register_callback_query_handler(get_fish_name, state=AddPastInfo.fish_get)
    dp.register_callback_query_handler(get_fish_count, state=AddPastInfo.fish_count)
    dp.register_callback_query_handler(confirmation, state=AddPastInfo.fish_confirm)