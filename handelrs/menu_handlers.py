from aiogram import types
from aiogram.types import CallbackQuery
from aiogram.dispatcher.filters.state import State, StatesGroup

from create_bot import *
from keyboards import menu_keyboard, confirm_keyboard1, back_menu_keyboard, callback_keyboard
from db import *
from .answers_for_user import ANSWERS

class FeedBack(StatesGroup):
    feedback = State()


async def start(message: types.Message):
    async with Session() as session:
        user_id = message.from_user.id
        user_name = message.chat.first_name
        user = await get_or_create_user(session, user_id=user_id, user_name=user_name)
        
        message_for_user = f'''–ü—Ä–∏–≤—ñ—Ç {user.user_name}! üôã
–Ø –¥–æ–ø–æ–º–æ–∂—É —Ç–æ–±—ñ –≤–µ—Å—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ç–≤–æ—ó—Ö —Ä–∏–±–∞–ª–æ–∫. 
–¢—ã –≤–∂–µ —Ä–æ–∑–ø–æ—á–∞–≤ —Ä–∏–±–æ–ª–æ–≤–ª—é? üé£'''
        
    await message.answer(message_for_user, reply_markup=confirm_keyboard1)

async def menu(callback_query: CallbackQuery):
    await callback_query.message.edit_reply_markup(reply_markup=None)
    await callback_query.message.answer('–í–∏–±–µ—Ä–∏ —Ä–æ–∑–¥—ñ–ª üóÇ', reply_markup=menu_keyboard)

async def help_info(callback_query: CallbackQuery):
    await callback_query.message.edit_reply_markup(reply_markup=None)
    await callback_query.message.answer(ANSWERS.get('help_info'), reply_markup=back_menu_keyboard)

async def get_feedback_category(callback_query: CallbackQuery):
    await callback_query.message.edit_reply_markup(reply_markup=None)
    await callback_query.message.answer("–û–±–µ—Ä–∏ —Ñ–æ—Ä–º—É –∑–≤–æ—Ä–æ—Ç–Ω—å–æ–≥–æ –∑–≤'—è–∑–∫—É üìÆ", 
                                        reply_markup=callback_keyboard)

async def types_feedback(callback_query: CallbackQuery):
    await callback_query.message.edit_reply_markup(reply_markup=None)
    if callback_query.data == 'bag_report':
        await callback_query.message.answer(
            '–†–µ—Ç–µ–ª—å–Ω–æ –æ–ø–∏—à–∏ –±–∞–≥, —è–∫–∏–π —Ç–∏ –∑–Ω–∞–π—à–æ–≤, —ñ –º–∏ –≤–∏–ø—Ä–∞–≤–∏–º–æ –π–æ–≥–æ —è–∫–Ω–∞–π—à–≤–∏–¥—â–µ!')
    elif callback_query.data == 'idea':
        await callback_query.message.answer(
            '–û–ø–∏—à–∏ —Å–≤–æ—é —ñ–¥–µ—é, —Ä–æ–∑–≥–ª—è–Ω–µ–º–æ —Ç–≤–æ—é –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—é —è–∫–Ω–∞–π—à–∏–≤–¥—â–µ!')
    await FeedBack.feedback.set()

async def feedback(message: types.Message, state: FeedBack):
    feedback_text = message.text
    
    admin_id = os.getenv('ADMIN_ID')
    
    await bot.send_message(admin_id, 
                           f"–ó–≤–æ—Ä–æ—Ç—ñ–π –∑–≤'—è–∑–æ–∫ –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {message.from_user.username}:\n\n{feedback_text}")
    
    await message.reply("–î—è–∫—É—é –∑–∞ —Ñ—ñ–¥–±–µ–∫ üòâ", reply_markup=back_menu_keyboard)
    await state.finish()

# async def backup_handler(message: types.Message):
#     backup_postgresql_db(database_uri=DATABASE_URL)
        


def register_handlers(dp: Dispatcher):
    dp.register_message_handler(start, commands=['start', 'help'])
    # dp.register_message_handler(backup_handler, text='/backup')
    dp.register_callback_query_handler(help_info, lambda c: c.data == 'faq')
    dp.register_callback_query_handler(menu, lambda c: c.data == 'menu')
    dp.register_callback_query_handler(get_feedback_category, lambda c: c.data == 'callback')
    dp.register_callback_query_handler(types_feedback, lambda c: c.data == 'bag_report')
    dp.register_callback_query_handler(types_feedback, lambda c: c.data == 'idea')
    dp.register_message_handler(feedback, state=FeedBack.feedback)