from random import choice
from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.types import CallbackQuery

from keyboards import keyboard3, keyboard4, keyboard5, keyboard6, keyboard7, keyboard10
from create_bot import *
from db import *


class CatchFish(StatesGroup):
    have_fishing = State()
    select_fish = State()
    name = State()
    count = State()
    confirm = State()


async def not_have_fishing(message: types.Message):
    user_name = message.chat.first_name
    
    message_for_user = f''' –©–æ –∂ {user_name}, –±–∞–∂–∞—é —è–∫–Ω–∞–π—à–≤–∏–¥—à–µ –∑–Ω–∞–π—Ç–∏ —á–∞—Å –¥–ª—è —É–ª—é–±–ª–µ–Ω–Ω–æ–≥–æ —Ö–æ–±–±—ñ! üòâ
–¢–∏ –æ–±–æ–≤'—è–∑–∫–æ–≤–æ –ø—ñ–π–º–∞—î—à —Å–≤—ñ–π —Ç—Ä–æ—Ñ–µ–π! üê°
        '''
    
    await bot.send_message(message.from_user.id, message_for_user, reply_markup=keyboard7)

async def have_fishing_confirm(message: types.Message, state: FSMContext):
    await bot.send_message(message.from_user.id, 
                           '–ü—ñ–¥—Ç–≤–µ—Ä–¥–∏ —â–æ –≤ —Ç–µ–±–µ —Å—å–æ–≥–æ–¥–Ω—ñ —Ä–∏–±–æ–ª–æ–≤–ª—è —ñ —è –∑–∞–Ω–µ—Å—É –¥–∞—Ç—É –¥–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ üìà',
                           reply_markup=keyboard10)
    await state.update_data(user_id = message.from_user.id)
    await CatchFish.have_fishing.set()

async def have_fishing(callback_query: CallbackQuery, state: FSMContext):
    if callback_query.data == 'no':
        await callback_query.message.answer('–ü–æ–≤–µ—Ä—Ç–∞—é—Å—å –¥–æ –º–µ–Ω—é üì±, –º–æ–∂–µ—à —Å–ø—Ä–æ–±—É–≤–∞—Ç–∏ —â–µ —Ä–∞–∑ ',
                             reply_markup=keyboard7)
        await state.finish()
    else:
        data = await state.get_data()
        user_id = data.get('user_id')
        print(type(user_id), user_id, sep='\n\n', end='\n\n\n\n')
        
        async with Session() as session:
            already_fishing = await get_or_create_fishing_trip(session=session, user_id=user_id)
            if already_fishing:
                message_for_user = [
                    '–°—Ö–æ–∂–µ —Ç–∏ –≤–∂–µ –Ω–∞ —Ä–∏–±–æ–ª–æ–≤–ª—ñ, —Ç–∏ –∑–ª–æ–≤–∏–≤ —â–µ —Ç—Ä–æ—Ñ–µ—ó? üòâ',
                    '–Ø –±–∞—á—É —Ç–∏ –ø—Ä–æ–¥–æ–≤–∂—É—î—à —Ä–∏–±–∞–ª–∏—Ç–∏, —è–∫ —É—Å–ø—ñ—Ö–∏, –≤–ø—ñ–π–º–∞–≤ —â–µ? üòâ',
                    '–¢–∞–∫-—Ç–∞–∫-—Ç–∞–∫, –Ω–æ–≤–∏–π —Ç—Ä–æ—Ñ–µ–π? üòâ',
                    '–†–∏–±–æ–ª–æ–≤–ª—è —Ç—Ä–∏–≤–∞—î, –∞ —á–∏ —î –Ω–æ–≤—ñ —Ç—Ä–æ—Ñ–µ—ó? üòâ'
                                    ]
            elif not already_fishing:
                message_for_user = ['–©–æ –∂, –ø–æ—á–Ω–µ–º–æ, —Ç–∏ –≤–∂–µ –≤—Å—Ç–∏–≥ —â–æ—Å—å –∑–ª–æ–≤–∏—Ç–∏? üòä']
        
            await callback_query.message.answer(choice(message_for_user), reply_markup=keyboard3)
            await CatchFish.select_fish.set()


async def start_catch_fish_dialog(message: types.Message):
    await message.answer('–ö—Ä—É—Ç–æ! –í–∏–±–µ—Ä–∏ —Ä–∏–±—É —è–∫—É —Ç–∏ –∑–ª–æ–≤–∏–≤', 
                         reply_markup=keyboard5)
    await CatchFish.name.set()

async def get_fish_name(callback_query: CallbackQuery, state: FSMContext):
    fish_name = callback_query.data
    await state.update_data(fish_name=fish_name)
    await callback_query.message.answer('–¢–µ–ø–µ—Ä –≤–∫–∞–∂–∏ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –ø—ñ–π–º–∞–Ω–æ—ó —Ä–∏–±–∏',
                                        reply_markup=keyboard6)
    await CatchFish.count.set()

async def get_fish_count(callback_query: CallbackQuery, state: FSMContext):
    fish_count = callback_query.data
    await state.update_data(fish_count=fish_count)
    fish_data = await state.get_data()
    fish_name = fish_data.get('fish_name')
    await callback_query.message.answer(f'–û—Ç–∂–µ, —Ç–≤—ñ–π —É–ª–æ–≤: "{fish_name}" –≤ –∫—ñ–ª—å–∫–æ—Å—Ç—ñ "{fish_count}". –í—ñ—Ä–Ω–æ?',
                                        reply_markup=keyboard4)
    await CatchFish.confirm.set()

async def handle_confirmation(message: types.Message, state: FSMContext):
    if message.text == "–¢–∞–∫":
        fish_data = await state.get_data()
        fish_name = fish_data.get('fish_name')
        fish_count = int(fish_data.get('fish_count'))
        
        async with Session() as session:
            await create_or_update_fish(session=session, user_id=message.from_user.id, 
                                        fish_name=fish_name, fish_count=fish_count) 
        
        await message.answer('–î–æ–±—Ä–µ, –∑–±–µ—Ä—ñ–≥–∞—é –¥–∞–Ω—ñ –¥–æ —Ç–≤–æ—î—ó —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ üòâ')
        await state.finish()
    elif message.text == "–ù—ñ":
        await message.answer('–î–æ–±—Ä–µ, —Å–ø—Ä–æ–±—É—î–º–æ —â–µ —Ä–∞–∑, –æ–±–µ—Ä–∏ –Ω–∞–∑–≤—É —Ä–∏–±–∏',
                             reply_markup=keyboard5)
        await CatchFish.name.set()
    elif message.text == '–ú–µ–Ω—é üì±':
        await message.answer('–í–∏–±–µ—Ä–∏ –¥—ñ—é', reply_markup=keyboard7)
        await state.finish()
    else:
        await message.answer('–ë—É–¥—å-–ª–∞—Å–∫–∞, –æ–±–µ—Ä–∏ "–¢–∞–∫" –∞–±–æ "–ù—ñ"')

def register_handlers(dp: Dispatcher):
    dp.register_message_handler(not_have_fishing, text='–ù—ñ üò¢')
    dp.register_message_handler(have_fishing_confirm, text='–¢–∞–∫!üòé') 
    dp.register_message_handler(have_fishing_confirm, text='–Ø –ø–æ—á–∏–Ω–∞—é|–ø—Ä–æ–¥–æ–≤–∂—É—é —Ä–∏–±–æ–ª–æ–≤–ª—é üòé') 
    dp.register_message_handler(start_catch_fish_dialog, text='–ê–≤–∂–µ—à! üòé', state=CatchFish.select_fish)
    dp.register_callback_query_handler(have_fishing, state=CatchFish.have_fishing)
    dp.register_callback_query_handler(get_fish_name, state=CatchFish.name)
    dp.register_callback_query_handler(get_fish_count, state=CatchFish.count)
    dp.register_message_handler(handle_confirmation, state=CatchFish.confirm)